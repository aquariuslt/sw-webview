{"version":3,"file":"runtime.js","sources":["../../js-src/src/fetch-graft.ts","../../js-src/node_modules/tiny-emitter/index.js","../../js-src/src/util/streaming-xhr.ts","../../js-src/src/event-stream.ts","../../js-src/src/util/api-request.ts","../../js-src/src/handlers/transferrable-converter.ts","../../js-src/src/handlers/messageport-manager.ts","../../js-src/src/components/service-worker.ts","../../js-src/src/components/service-worker-registration.ts","../../js-src/src/components/service-worker-container.ts"],"sourcesContent":["import { SW_PROTOCOL, GRAFTED_REQUEST_HEADER } from \"swwebview-settings\";\n\n// We can't read POST bodies in native code, so we're doing the super-gross:\n// putting it in a custom header. Hoping we can get rid of this nonsense soon.\n\nconst originalFetch = fetch;\n\nfunction graftedFetch(request: RequestInfo, opts?: RequestInit) {\n    if (!opts || !opts.body) {\n        // no body, so none of this matters\n        return originalFetch(request, opts);\n    }\n\n    let url = request instanceof Request ? request.url : request;\n    let resolvedURL = new URL(url, window.location.href);\n\n    if (resolvedURL.protocol !== SW_PROTOCOL + \":\") {\n        // if we're not fetching on the SW protocol, then this\n        // doesn't matter.\n        return originalFetch(request, opts);\n    }\n\n    opts.headers = opts.headers || {};\n    opts.headers[GRAFTED_REQUEST_HEADER] = opts.body;\n\n    return originalFetch(request, opts);\n}\n\n(graftedFetch as any).__bodyGrafted = true;\n\nif ((originalFetch as any).__bodyGrafted !== true) {\n    (window as any).fetch = graftedFetch;\n\n    console.log('fetch 替换成功');\n    const originalSend = XMLHttpRequest.prototype.send;\n    const originalOpen = XMLHttpRequest.prototype.open;\n\n    XMLHttpRequest.prototype.open = function(method, url) {\n        let resolvedURL = new URL(url, window.location.href);\n        if (resolvedURL.protocol === SW_PROTOCOL + \":\") {\n            console.log('设置 _graftBody = true');\n            this._graftBody = true;\n        }\n        console.log('使用 wrap 过的 XHR 请求 open(), url:' + resolvedURL);\n        originalOpen.apply(this, arguments);\n    };\n\n    XMLHttpRequest.prototype.send = function(data) {\n        if (this._graftBody === true) {\n            console.log('wrap 过的 XHR 请求准备发送前设置 header:' + GRAFTED_REQUEST_HEADER + ','+ data)\n            this.setRequestHeader(GRAFTED_REQUEST_HEADER, data);\n        }\n        console.log('使用 wrap 过的 XHR 请求 send():' + data);\n        originalSend.apply(this, arguments);\n    };\n\n    // @ts-ignore\n    window.isNewFetch = 1;\n    // @ts-ignore\n    window.isNewXHR = 1;\n}\n","function E() {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function(name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function(name, callback, ctx) {\n    var self = this;\n    function listener() {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    }\n\n    listener._ = callback;\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function(name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  dispatchEvent: function(ev) {\n    var name = ev.type;\n    this.emit(name, ev);\n  },\n\n  off: function(name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    liveEvents.length ? (e[name] = liveEvents) : delete e[name];\n\n    return this;\n  }\n};\n\nE.prototype.addEventListener = E.prototype.on;\nE.prototype.removeEventListener = E.prototype.off;\n\nmodule.exports = E;\n","import EventEmitter from \"tiny-emitter\";\nimport { API_REQUEST_METHOD } from \"swwebview-settings\";\n\ninterface CustomMessageEvent<T> extends MessageEvent {\n    data: T;\n}\n\nexport class StreamingXHR extends EventEmitter {\n    private xhr: XMLHttpRequest;\n    private eventSource: EventSource;\n    private seenBytes = 0;\n    isOpen = false;\n    private url: string;\n    id: string;\n\n    // We allow subscribing before we've created the EventSource\n    // itself, so we need to keep track of what we have and have\n    // not subscribed to.\n    private subscribedEvents: string[] = [];\n\n    get ready() {\n        if (this.isOpen === false) {\n            // We try to lazy-load this stream if at all possible - that way\n            // we don't have any overhead if a page doesn't use any of the\n            // SW APIs.\n            this.open();\n        }\n        return this.readyPromise;\n    }\n\n    private readyPromise: Promise<void>;\n    private readyFulfill?: () => void;\n\n    constructor(url: string) {\n        super();\n        this.url = url;\n        this.resetReadyPromise();\n        this.receiveNewEvent = this.receiveNewEvent.bind(this);\n    }\n\n    resetReadyPromise() {\n        this.readyPromise = new Promise(fulfill => {\n            this.readyFulfill = fulfill;\n        });\n    }\n\n    open() {\n        console.log('[Streaming XHR] called open')\n        if (this.isOpen === true) {\n            throw new Error(\"Already open\");\n        }\n\n        this.isOpen = true;\n\n        this.eventSource = new EventSource(this.url);\n\n        this.subscribedEvents.forEach(type => {\n            // Add listeners for each of the types we have already added\n            this.eventSource.addEventListener(type, this.receiveNewEvent);\n        });\n\n        this.eventSource.addEventListener(\"eventstream\", (e: MessageEvent) => {\n            console.log(\"GOT ID:\", e.data);\n            this.id = JSON.parse(e.data).id;\n            if (this.readyFulfill) {\n                this.readyFulfill();\n                this.readyFulfill = undefined;\n            }\n        });\n\n        // (this.eventSource as any).onopen = () => {\n        //     if (this.readyFulfill) {\n        //         this.readyFulfill();\n        //         this.readyFulfill = undefined;\n        //     }\n        // };\n\n        (this.eventSource as any).onclose = () => {\n            this.isOpen = false;\n            this.resetReadyPromise();\n        };\n\n        // this.xhr = new XMLHttpRequest();\n\n        // this.xhr.open(API_REQUEST_METHOD, this.url);\n        // this.xhr.onreadystatechange = this.receiveData.bind(this);\n        // this.xhr.send();\n    }\n\n    addEventListener<T>(\n        type: string,\n        func: (e: CustomMessageEvent<T>) => void\n    ) {\n        console.log(`[Streaming XHR]: addEventListener:` + type)\n        super.addEventListener(type, func);\n        if (this.subscribedEvents.indexOf(type) === -1) {\n            if (this.eventSource) {\n                // If our event source is already open then we need to\n                // add a new event listener immediately.\n                this.eventSource.addEventListener(type, this.receiveNewEvent);\n            }\n            this.subscribedEvents.push(type);\n        }\n        // this.eventSource.addEventListener(type, func);\n    }\n\n    receiveNewEvent(e: MessageEvent) {\n\n        console.log(`[Streaming XHR]: receiveNewEvent:` + e.type)\n        if (e.isTrusted === false) {\n            return;\n        }\n\n        let jsonMsgEvent = new MessageEvent(\n            e.type,\n            Object.assign({}, e, { data: JSON.parse(e.data) })\n        );\n\n        this.dispatchEvent(jsonMsgEvent);\n    }\n\n    // receiveData() {\n    //     if (this.xhr.readyState === 4) {\n    //         this.isOpen = false;\n    //         this.resetReadyPromise();\n\n    //         setTimeout(() => {\n    //             // This doesn't fire if page is unloading. So re-establish\n    //             // connection here?\n    //             console.error(\"Streaming task has stopped\");\n    //         }, 1);\n    //     }\n\n    //     if (this.xhr.readyState !== 3) {\n    //         return;\n    //     }\n\n    //     if (this.readyFulfill) {\n    //         this.readyFulfill();\n    //         this.readyFulfill = undefined;\n    //     }\n\n    //     // This means the responseText keeps growing and growing. Perhaps\n    //     // we should look into cutting this off and re-establishing a new\n    //     // link if it gets too big.\n    //     let newData = this.xhr.responseText.substr(this.seenBytes);\n    //     this.seenBytes = this.xhr.responseText.length;\n\n    //     let events = newData.split(\"\\n\");\n\n    //     events.filter(s => s !== \"\").forEach(dataSlice => {\n    //         let [_, event, data] = /([\\w\\-]+):(.*)/.exec(dataSlice)!;\n    //         let parsedData;\n    //         try {\n    //             parsedData = JSON.parse(data);\n    //         } catch (err) {\n    //             throw new Error(\n    //                 \"Could not parse: \" + dataSlice + err.toString()\n    //             );\n    //         }\n\n    //         let evt = new MessageEvent(event, {\n    //             data: parsedData\n    //         });\n    //         this.dispatchEvent(evt);\n    //     });\n    // }\n\n    close() {\n        (this.eventSource as any).close();\n        // this.xhr.abort();\n    }\n}\n","import { StreamingXHR } from \"./util/streaming-xhr\";\nimport { EVENT_STREAM_PATH } from \"swwebview-settings\";\n\nlet eventsURL = new URL(EVENT_STREAM_PATH, window.location.href);\neventsURL.searchParams.append(\n    \"path\",\n    window.location.pathname + window.location.search\n);\n\nexport const eventStream = new StreamingXHR(eventsURL.href);\n","import { API_REQUEST_METHOD } from \"swwebview-settings\";\nimport { eventStream } from \"../event-stream\";\nimport { PromiseReturn } from \"../responses/api-responses\";\n\nexport class APIError extends Error {\n    response: Response;\n\n    constructor(message: string, response: Response) {\n        super(message);\n        this.response = response;\n    }\n}\n\ninterface StoredPromise {\n    fulfill: (any) => void;\n    reject: (Error) => void;\n}\n\nlet storedPromises = new Map<number, StoredPromise>();\n\nexport function apiRequest<T>(path: string, body: any = undefined): Promise<T> {\n    return eventStream.ready.then(() => {\n        return new Promise<T>((fulfill, reject) => {\n            let i = 0;\n            while (storedPromises.has(i)) {\n                i++;\n            }\n            storedPromises.set(i, { fulfill, reject });\n\n            (window as any).webkit.messageHandlers[\"SWWebView\"].postMessage({\n                streamID: eventStream.id,\n                promiseIndex: i,\n                path: path,\n                body: body\n            });\n        });\n\n        // return fetch(path, {\n        //     method: API_REQUEST_METHOD,\n        //     body: body === undefined ? undefined : JSON.stringify(body),\n        //     headers: {\n        //         \"Content-Type\": \"application/json\"\n        //     }\n        // });\n    });\n    // .then(res => {\n    //     if (res.ok === false) {\n    //         if (res.status === 500) {\n    //             return res.json().then(errorJSON => {\n    //                 throw new Error(errorJSON.error);\n    //             });\n    //         }\n    //         throw new APIError(\n    //             \"Received a non-200 response to API request\",\n    //             res\n    //         );\n    //     }\n    //     return res.json();\n    // });\n}\n\neventStream.addEventListener<PromiseReturn>(\"promisereturn\", e => {\n    let promise = storedPromises.get(e.data.promiseIndex);\n    if (!promise) {\n        throw new Error(\"Trying to resolve a Promise that doesn't exist\");\n    }\n    storedPromises.delete(e.data.promiseIndex);\n    if (e.data.error) {\n        promise.reject(new Error(e.data.error));\n    }\n    promise.fulfill(e.data.response);\n});\n","export function serializeTransferables(message: any, transferables: any[]) {\n    // Messages can pass transferables, but those transferables can also exist\n    // within the message. We need to replace any instances of those transferables\n    // with serializable objects.\n\n    if (transferables.indexOf(message) > -1) {\n        return {\n            __transferable: {\n                index: transferables.indexOf(message)\n            }\n        };\n    } else if (message instanceof Array) {\n        return message.map(m => serializeTransferables(m, transferables));\n    } else if (\n        typeof message == \"number\" ||\n        typeof message == \"string\" ||\n        typeof message == \"boolean\"\n    ) {\n        return message;\n    } else {\n        let obj = {};\n        Object.keys(message).forEach(key => {\n            obj[key] = serializeTransferables(message[key], transferables);\n        });\n        return obj;\n    }\n}\n","import { apiRequest } from \"../util/api-request\";\nimport { eventStream } from \"../event-stream\";\nimport { MessagePortAction } from \"../responses/api-responses\";\nimport { serializeTransferables } from \"./transferrable-converter\";\n\nclass MessagePortProxy {\n    port: MessagePort;\n    id: string;\n\n    constructor(port: MessagePort, id: string) {\n        this.port = port;\n        this.id = id;\n        this.port.addEventListener(\"message\", this.receiveMessage.bind(this));\n        this.port.start();\n    }\n\n    receiveMessage(e: MessageEvent) {\n        console.log(\"! GOT MESSAGE\", e);\n        apiRequest(\"/MessagePort/proxyMessage\", {\n            id: this.id,\n            message: e.data\n        }).catch(err => {\n            console.error(\"Failed to proxy MessagePort message\", err);\n        });\n    }\n}\n\nlet currentProxies = new Map<String, MessagePortProxy>();\n\nexport function addProxy(port: MessagePort, id: string) {\n    currentProxies.set(id, new MessagePortProxy(port, id));\n}\n\neventStream.addEventListener<MessagePortAction>(\"messageport\", e => {\n    // Any message we receive must be associated with an existing port proxy\n\n    let existingProxy = currentProxies.get(e.data.id);\n    if (!existingProxy) {\n        throw new Error(\n            `Tried to send ${e.data.type} to MessagePort that does not exist`\n        );\n    }\n\n    if (e.data.type == \"message\") {\n        // A message can send along new MessagePorts of its own, so if it has,\n        // we need to map the wrapper IDs sent through with new MessagePorts.\n\n        let ports = e.data.portIDs.map(id => {\n            let channel = new MessageChannel();\n            addProxy(channel.port2, id);\n            return channel.port1;\n        });\n\n        existingProxy.port.postMessage(e.data.data, ports);\n    } else {\n        // is close. Remove from collection, free up for garbage collection.\n        console.info(\n            \"Closing existing MessagePort based on native garbage collection.\"\n        );\n        currentProxies.delete(e.data.id);\n        existingProxy.port.close();\n    }\n});\n","import EventEmitter from \"tiny-emitter\";\nimport { ServiceWorkerRegistrationImplementation } from \"./service-worker-registration\";\nimport {\n    ServiceWorkerAPIResponse,\n    WorkerInstallErrorAPIResponse,\n    PostMessageResponse\n} from \"../responses/api-responses\";\nimport { eventStream } from \"../event-stream\";\nimport { apiRequest } from \"../util/api-request\";\nimport { serializeTransferables } from \"../handlers/transferrable-converter\";\nimport { addProxy } from \"../handlers/messageport-manager\";\n\nconst existingWorkers: ServiceWorkerImplementation[] = [];\n\nexport class ServiceWorkerImplementation extends EventEmitter\n    implements ServiceWorker {\n    id: string;\n    scriptURL: string;\n    state: ServiceWorkerState;\n    onstatechange: (e) => void;\n    onerror: (Error) => void;\n\n    private registration: ServiceWorkerRegistrationImplementation;\n\n    constructor(\n        opts: ServiceWorkerAPIResponse,\n        registration: ServiceWorkerRegistrationImplementation\n    ) {\n        super();\n        this.updateFromAPIResponse(opts);\n        this.registration = registration;\n        this.id = opts.id;\n\n        this.addEventListener(\"statechange\", e => {\n            if (this.onstatechange) {\n                this.onstatechange(e);\n            }\n        });\n    }\n\n    updateFromAPIResponse(opts: ServiceWorkerAPIResponse) {\n        this.scriptURL = opts.scriptURL;\n        let oldState = this.state;\n        this.state = opts.installState;\n\n        if (oldState !== this.state) {\n            let evt = new CustomEvent(\"statechange\");\n            this.dispatchEvent(evt);\n        }\n    }\n\n    postMessage(msg: any, transfer: any[] = []) {\n        apiRequest<PostMessageResponse>(\"/ServiceWorker/postMessage\", {\n            id: this.id,\n            registrationID: this.registration.id,\n            message: serializeTransferables(msg, transfer),\n            transferCount: transfer.length\n        }).then(response => {\n            // Register MessagePort proxies for all the transferables we just sent.\n            response.transferred.forEach((id, idx) =>\n                addProxy(transfer[idx], id)\n            );\n        });\n    }\n\n    static get(opts: ServiceWorkerAPIResponse) {\n        return existingWorkers.find(w => w.id === opts.id);\n    }\n\n    static getOrCreate(\n        opts: ServiceWorkerAPIResponse,\n        registration: ServiceWorkerRegistrationImplementation\n    ) {\n        let existing = this.get(opts);\n        if (existing) {\n            return existing;\n        } else {\n            let newWorker = new ServiceWorkerImplementation(opts, registration);\n            existingWorkers.push(newWorker);\n            return newWorker;\n        }\n    }\n}\n\neventStream.addEventListener<ServiceWorkerAPIResponse>(\"serviceworker\", e => {\n    let existingWorker = ServiceWorkerImplementation.get(e.data);\n    console.info(\"Worker update:\", e.data);\n    if (existingWorker) {\n        existingWorker.updateFromAPIResponse(e.data);\n    }\n});\n\neventStream.addEventListener<\n    WorkerInstallErrorAPIResponse\n>(\"workerinstallerror\", e => {\n    console.error(\n        `Worker installation failed: ${e.data.error} (in ${e.data.worker\n            .scriptURL})`\n    );\n});\n","import EventEmitter from \"tiny-emitter\";\nimport { ServiceWorkerRegistrationAPIResponse } from \"../responses/api-responses\";\nimport { apiRequest } from \"../util/api-request\";\nimport { BooleanSuccessResponse } from \"../responses/api-responses\";\nimport { eventStream } from \"../event-stream\";\nimport { ServiceWorkerImplementation } from \"./service-worker\";\n\nconst existingRegistrations: ServiceWorkerRegistrationImplementation[] = [];\n\nexport class ServiceWorkerRegistrationImplementation extends EventEmitter\n    implements ServiceWorkerRegistration {\n    active: ServiceWorker | null;\n    installing: ServiceWorker | null;\n    waiting: ServiceWorker | null;\n\n    pushManager: PushManager;\n    scope: string;\n    id: string;\n    sync: SyncManager;\n\n    constructor(opts: ServiceWorkerRegistrationAPIResponse) {\n        super();\n        this.scope = opts.scope;\n        this.id = opts.id;\n        this.updateFromResponse(opts);\n    }\n\n    static getOrCreate(opts: ServiceWorkerRegistrationAPIResponse) {\n        let registration = existingRegistrations.find(reg => reg.id == opts.id);\n        if (!registration) {\n            if (opts.unregistered === true) {\n                throw new Error(\n                    \"Trying to create an unregistered registration\"\n                );\n            }\n            console.info(\"Creating new registration:\", opts.id, opts);\n            registration = new ServiceWorkerRegistrationImplementation(opts);\n            existingRegistrations.push(registration);\n        }\n        return registration;\n    }\n\n    updateFromResponse(opts: ServiceWorkerRegistrationAPIResponse) {\n        if (opts.unregistered === true) {\n            console.info(\"Removing inactive registration:\", opts.id);\n            // Remove from our array of existing registrations, as we don't\n            // want to refer to this again.\n            let idx = existingRegistrations.indexOf(this);\n            existingRegistrations.splice(idx, 1);\n            return;\n        }\n\n        // @ts-ignore\n        this.active = opts.active\n            ? ServiceWorkerImplementation.getOrCreate(opts.active, this)\n            : null;\n        // @ts-ignore\n        this.installing = opts.installing\n            ? ServiceWorkerImplementation.getOrCreate(opts.installing, this)\n            : null;\n        // @ts-ignore\n        this.waiting = opts.waiting\n            ? ServiceWorkerImplementation.getOrCreate(opts.waiting, this)\n            : null;\n    }\n\n    onupdatefound: () => void;\n\n    getNotifications() {\n        throw new Error(\"not yet\");\n    }\n\n    showNotification(\n        title: string,\n        options?: NotificationOptions\n    ): Promise<void> {\n        throw new Error(\"not yet\");\n    }\n\n    unregister(): Promise<boolean> {\n        return apiRequest<\n            BooleanSuccessResponse\n        >(\"/ServiceWorkerRegistration/unregister\", {\n            id: this.id\n        }).then(response => {\n            return response.success;\n        });\n    }\n\n    update(): Promise<void> {\n        throw new Error(\"not yet\");\n    }\n}\n\neventStream.addEventListener<\n    ServiceWorkerRegistrationAPIResponse\n>(\"serviceworkerregistration\", e => {\n    console.log(\"reg update\", e.data);\n    let reg = existingRegistrations.find(r => r.id == e.data.id);\n    if (reg) {\n        reg.updateFromResponse(e.data);\n    } else {\n        console.info(\n            \"Received update for non-existent registration\",\n            e.data.id\n        );\n    }\n});\n","import EventEmitter from \"tiny-emitter\";\nimport { eventStream } from \"../event-stream\";\nimport { apiRequest } from \"../util/api-request\";\nimport {\n    ServiceWorkerRegistrationAPIResponse,\n    ServiceWorkerContainerAPIResponse\n} from \"../responses/api-responses\";\nimport { ServiceWorkerRegistrationImplementation } from \"../components/service-worker-registration\";\nimport { ServiceWorkerImplementation } from \"./service-worker\";\n\nclass ServiceWorkerContainerImplementation extends EventEmitter\n    implements ServiceWorkerContainer {\n    // used for detection\n    static __isSWWebViewImplementation = true;\n\n    private _controller: ServiceWorker | null = null;\n\n    get controller() {\n        if (this.receivedInitialProperties == false) {\n            throw new Error(\n                \"You have attempted to access the controller property before it is ready. \" +\n                    \"SWWebView has an initialisation delay - please access after using navigator.serviceWorker.ready\"\n            );\n        }\n        return this._controller!;\n    }\n\n    oncontrollerchange: (ev: Event) => void;\n    onmessage: (ev: Event) => void;\n\n    ready: Promise<ServiceWorkerRegistration>;\n    private readyFulfill?: (ServiceWorkerRegistration) => void;\n\n    location: Location;\n\n    private receivedInitialProperties = false;\n\n    constructor() {\n        super();\n        console.info(\n            \"Created new ServiceWorkerContainer for\",\n            window.location.href\n        );\n        this.location = window.location;\n\n        let readyFulfill: ((ServiceWorkerRegistration) => void) | undefined;\n        this.ready = new Promise((fulfill, reject) => {\n            this.readyFulfill = fulfill;\n        });\n\n        this.addEventListener(\"controllerchange\", e => {\n            if (this.oncontrollerchange) {\n                this.oncontrollerchange(e);\n            }\n        });\n\n        if (eventStream.isOpen === false) {\n            eventStream.open();\n        }\n    }\n\n    updateFromAPIResponse(opts: ServiceWorkerContainerAPIResponse) {\n        // set this so that client code can now successfully access controller\n        this.receivedInitialProperties = true;\n\n        if (opts.readyRegistration) {\n            let reg = ServiceWorkerRegistrationImplementation.getOrCreate(\n                opts.readyRegistration\n            );\n\n            reg.updateFromResponse(opts.readyRegistration!);\n\n            if (this.readyFulfill) {\n                this.readyFulfill(reg);\n                this.readyFulfill = undefined;\n            } else {\n                this.ready = Promise.resolve(reg);\n            }\n        } else if (!this.readyFulfill) {\n            this.ready = new Promise((fulfill, reject) => {\n                this.readyFulfill = fulfill;\n            });\n        }\n\n        let newControllerInstance: ServiceWorker | null;\n\n        if (opts.controller) {\n            newControllerInstance = ServiceWorkerImplementation.getOrCreate(\n                opts.controller\n            );\n        } else {\n            newControllerInstance = null;\n        }\n\n        if (newControllerInstance !== this._controller) {\n            this._controller = newControllerInstance;\n            let evt = new CustomEvent(\"controllerchange\");\n            console.log(`worker 分发 controllerchange 事件`)\n            this.dispatchEvent(evt);\n        }\n    }\n\n    getRegistration(\n        scope?: string\n    ): Promise<ServiceWorkerRegistration | undefined> {\n        return apiRequest<ServiceWorkerRegistrationAPIResponse | null>(\n            \"/ServiceWorkerContainer/getregistration\",\n            {\n                path: window.location.pathname,\n                scope: scope\n            }\n        ).then(response => {\n            if (response === null) {\n                return undefined;\n            }\n            return ServiceWorkerRegistrationImplementation.getOrCreate(\n                response\n            );\n        });\n    }\n\n    getRegistrations(): Promise<ServiceWorkerRegistration[]> {\n        return apiRequest<\n            [ServiceWorkerRegistrationAPIResponse]\n        >(\"/ServiceWorkerContainer/getregistrations\", {\n            path: window.location.pathname\n        }).then(response => {\n            let registrations: ServiceWorkerRegistration[] = [];\n\n            response.forEach(r => {\n                if (r) {\n                    registrations.push(\n                        ServiceWorkerRegistrationImplementation.getOrCreate(r)\n                    );\n                }\n            });\n\n            return registrations;\n        });\n    }\n\n    register(\n        url: string,\n        opts?: RegistrationOptions\n    ): Promise<ServiceWorkerRegistration> {\n        console.info(\"Registering new worker at:\", url);\n        return apiRequest<\n            ServiceWorkerRegistrationAPIResponse\n        >(\"/ServiceWorkerContainer/register\", {\n            path: window.location.pathname,\n            url: url,\n            scope: opts ? opts!.scope : undefined\n        }).then(response => {\n            return ServiceWorkerRegistrationImplementation.getOrCreate(\n                response\n            );\n        });\n    }\n}\n\neventStream.addEventListener<\n    ServiceWorkerContainerAPIResponse\n>(\"serviceworkercontainer\", e => {\n    console.log(\"Container update\", e.data);\n    (navigator.serviceWorker as ServiceWorkerContainerImplementation).updateFromAPIResponse(\n        e.data\n    );\n});\n\nif (\"ServiceWorkerContainer\" in self === false) {\n    // We lazily initialize this when the client code requests it.\n    let container: ServiceWorkerContainerImplementation | undefined = undefined;\n\n    Object.defineProperty(navigator, \"serviceWorker\", {\n        configurable: true,\n        get() {\n            if (container) {\n                return container;\n            }\n            return (container = new ServiceWorkerContainerImplementation());\n        }\n    });\n}\n"],"names":["SW_PROTOCOL","GRAFTED_REQUEST_HEADER","EventEmitter","EVENT_STREAM_PATH"],"mappings":"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"}